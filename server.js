 /******************************************************
  * PLEASE DO NOT EDIT THIS FILE
  * the verification process may break
  * ***************************************************/

 'use strict';

//some of theese aren't fully necessary and can be coded around fairly easily. Using them was easier, however
 var fs = require('fs');
 var express = require('express');

 var app = express();
 var bodyParser = require('body-parser')
 var crypto = require("crypto");
 var bcrypt = require("bcrypt");
 var session = require('express-session')
 const MongoClient = require('mongodb').MongoClient;
 var mongoose = require('mongoose');
 var User = require("./models/user");
 var polls = require("./models/polls");
 mongoose.connect('mongodb+srv://user1:pass1@ssmongo0-ef6n5.mongodb.net/UserTrack01')

 var connection = mongoose.connection;
 connection.on('connected', function () { 
 })

 
 app.use(bodyParser.urlencoded({
     extended: true
 }));

//use sessions for tracking logins
app.use(session({
  secret: 'work hard or hard work',
  resave: true,
  saveUninitialized: false
}));



// Logout Route - accessing this page deletes the session
app.route('/logout')
.get(function(req,res){
  if (req.session) {
    // delete session object
    req.session.destroy(function (err) {
      if (err) {
        res.render('message.ejs', {message2: err})

      } else {
        return res.redirect('/');
      }
    });
  }

})

app.use(function(req, res, next) {
  res.locals.user = req.session.username;
  next();
});



 //post route for creating users
 app.route('/createUserPost')
     .post(function (req, res) {
         //Verify that link is proper/valid
         if (req.body.username && req.body.password && req.body.passwordConf && req.body.password == req.body.passwordConf ) {
             var userData = {
                 username: req.body.username,
                 password: req.body.password,
                 passwordConf: req.body.passwordConf,
             };
             //insert data into the database
             User.create(userData, function (err, user) {
                 if (err) {console.log('error 59');res.render('message.ejs', {message2: err})} else {
                     console.log('A new user has been created');
                     return res.render('message.ejs', {message1: 'Congratulations', message2: 'You have registed a new user. Your username is ' + userData.username})
                 }
             });
         }else{
			 //if password or username are invalid
         res.render('message.ejs', {message2: 'Invalid request, please try a new username and password combination'})
         }
     })

//Authenticates user login
 app.route('/logInAuth')
     .post(function (req, res) {
         User.getAuthenticated(req.body.username, req.body.password, function (err, user, reason) {
             if (err) {console.log('1 error')}

             if (user) {
               
               req.session.userId = user._id;
               req.session.username = user.username;
               res.redirect('/');
             } else {
               res.render('message.ejs', {message2: 'wrong password or username'})
             }

         })
     })


 //Checks that user is logged in and allows new poll generation
 //assigns random url id for new polls
 //No editing existing polls here
 app.route('/createPoll')
     .post(function (req, res) {
   if(!req.session.username){
     res.render('message.ejs', {message1: 'please log in first'});}else{
             //enter user sign in check here
             if (    req.session.username && req.body.pollTitle && req.body.pollEntries) {
                 //declare mongoose collections
               var uniqueIdSource = crypto.randomBytes(6).toString('hex')
               var pollVotesHolder = [];
                              
                 var pollEntriesHolder = [];
                 for (var i = 0; i < req.body.pollEntries.length; i++) {
                     pollVotesHolder[i] = 0;
                     pollEntriesHolder[i] = req.body.pollEntries[i];
                 }
               pollEntriesHolder = pollEntriesHolder.filter(Boolean)
               
                 var pollHolder = {
                     username: req.session.username,
                     uniqueId: uniqueIdSource, //array of urls
                     pollTitles: req.body.pollTitle, //array of poll titles per url
                     pollEntries: [pollEntriesHolder], //array of poll options per url
                     pollVotes: pollVotesHolder
                 }
                 console.log('pollHolder check = ' + pollHolder);
                 polls.findOneAndUpdate({
                     username:  req.session.username,
                     pollTitle: req.body.pollTitle
                 }, pollHolder, {
                     upsert: true,
                     setDefaultsOnInsert: true
                 }, function (err, ans) {
                     if (err) {
                       res.render('message.ejs', {message2: err})
                     }
                     console.log('ans ='+ ans);
                     res.redirect('/voting/' + uniqueIdSource);
                 })
             }
   if(!req.session.username ){
     res.render('message.ejs', {message2: 'Please Log In to Create a Poll'})
     // res.render('errorDoc.ejs', {errorMessage: 'Please Log In to Create a Poll'})
   }else{
   if(!req.body.pollTitle ){
     res.render('message.ejs', {message2: 'Invalid poll title, please try again'})
     // res.render('errorDoc.ejs', {errorMessage: 'Invalid poll title, please try again'})
     
     }else{
   if(!req.body.pollEntries ){
     res.render('message.ejs', {message2: 'Invalid poll entry, please try again'})
     // res.render('errorDoc.ejs', {errorMessage: 'Invalid poll entry, please try again'})
   
   }}
     }
   
   
    
 }}
)


 //Returns all stored polls

 app.route('/showAllPolls' && '/allPolls')
     .get(function (req, res) {
         polls.find({}, function (err, pollList) {

             if (err) {
                 console.log('error')
             } else {
               var messageArray = [];
               for(var i = 0; i< pollList.length; i++){
                 var innerMessageArrayObject = {};
               innerMessageArrayObject.title = pollList[i].pollTitle;
               innerMessageArrayObject.title2 = pollList[i].uniqueId;
               innerMessageArrayObject.Buttono = pollList[i].uniqueId;
               innerMessageArrayObject.ButtonoResulto = pollList[i].uniqueId;
               innerMessageArrayObject.ButtonoMessage = 'Results';
               messageArray[i] = innerMessageArrayObject;  
               }
               
               var sendObject = {messageArray : messageArray}
               
                 res.render('messageArrayLogged.ejs', sendObject)
             }
         })
     })


//route to show all polls
 app.route('/myPolls')
     .get(function (req, res) {
   if(!req.session.username){
     res.render('message.ejs', {message1: 'please log in first'});}else{
           polls.find({
			   // not secure - would be better to use _id if actually needed
             username: req.session.username
         }, function (err, pollReturnObject) {

             var messageArray = [];
               for(var i = 0; i< pollReturnObject.length; i++){
                 var innerMessageArrayObject = {};
                 innerMessageArrayObject.title = pollReturnObject[i].pollTitle;
                 innerMessageArrayObject.title2 = pollReturnObject[i].uniqueId;
                 innerMessageArrayObject.ButtonoDeleteo = pollReturnObject[i]._id;
                 innerMessageArrayObject.ButtonoMessage = 'Delete';
                 messageArray[i] = (innerMessageArrayObject); 
               }
               var sendObject = {messageArray : messageArray}
               
               //if there are no polls or the user is not logged in
               if(pollReturnObject.length > 0){
                 res.render('messageArrayLogged.ejs', sendObject);}else{
                   res.render('message.ejs', {message1: 'please create a poll first'})}
           })
     }
 }
         )


app.route('/deletePoll')
  .post(function(req,res){
  console.log('req.body.deleteId == ' + req.body.deleteId);
  polls.findByIdAndRemove(req.body.deleteId, (error, data)=>{
    console.log("data all gone and deleted yo");
    res.redirect('/myPolls');
  }
  )

})




 app.route('/voting/:requrl')
.get(function(req, res){
  polls.findOne({uniqueId: req.params.requrl}, function(request, response){
    var votingOptions = response.pollEntries[0];
    var pollTitle = response.pollTitle;
    req.session.uniqueId = req.params.requrl;
    
    var votingOptionsPassObject = {votingOptions: votingOptions, pollTitle: pollTitle};
    res.render("voting.ejs", votingOptionsPassObject)
  })
 }
    )

 app.route('/results/:requrl')
.get(function(req, res){
  polls.findOne({uniqueId: req.params.requrl}, function(request, response){
    var votingOptions = response.pollEntries[0];
    var votingOptionsPassObject = {votingOptions: votingOptions, titleOfPoll: response.pollTitle, pollVotes: response.pollVotes };
    res.render("results2.ejs", votingOptionsPassObject)
  })
 }
    )




               // req.session.userId = user._id;



 app.route('/votePollAction')
     .post(function (req, res) {
   if(!req.session[req.session.uniqueId]){
		 var urlHolder = null;
		 //if form submits poll id use it
		 if(req.session.uniqueId){var requrl = req.session.uniqueId; console.log('req.body.pollId exists'); }else{console.log('please choose a poll id');}
		 var voteId = String(req.body.voteId);
		 var pollReturnObject = {};				 
		 console.log('requested poll: ' + requrl + ",  requested vote: " + voteId);
		 polls.findOne({ $or:[ {'pollTitle':requrl}, {'uniqueId':requrl} ]}
		 , function (err, data) {
			 var pollReturnObject = data;
       // console.log('data is ' + data);
			 urlHolder = pollReturnObject.uniqueId;
			 var pollEntryArray = pollReturnObject.pollEntries[0];
			 var numberArray = pollReturnObject.pollVotes;
				console.log('retrieved a poll for voting on entry index  ' +  pollEntryArray.indexOf(voteId) + " ordered to increase a vote of  " + numberArray[pollEntryArray.indexOf(voteId)] );
			 var votePosition = pollEntryArray.indexOf(voteId);          
			 pollReturnObject.pollVotes[votePosition] = pollReturnObject.pollVotes[votePosition] + 1 ;
			 // console.log('changed to = ' +  pollReturnObject )
			 pollReturnObject.markModified('pollVotes')
			 pollReturnObject.save(function(err){
				 if(err){
					 console.log(err);   
					 return;
					 }
         req.session[req.session.uniqueId] = true;
					 res.redirect('results/' + urlHolder );
						 }
							 );
							 
							 
							 })
}else{
  res.render('message.ejs', {message2: 'Sorry but you have already voted. Try voting on another poll instead'})}
 }
          
          )
							 

 app.use('/public', express.static(process.cwd() + '/public'));

 app.route('/_api/package.json')
     .get(function (req, res, next) {
         console.log('requested');
         fs.readFile(__dirname + '/package.json', function (err, data) {
             if (err) return next(err);
             res.type('txt').send(data.toString());
         });
     });


 app.route('/:page')
     .get(function (req, res) {
    if (req.params.page.indexOf('.ejs') != -1) {
    res.render(req.params.page);
    }else{
         if (req.params.page.indexOf('.html') == -1) {} else {
             req.params.page = req.params.page.substring(0, req.params.page.length - 5);
         }
         res.sendFile(process.cwd() + '/views/' + req.params.page + '.html');
     }})



 app.route('/')
     .get(function (req, res) {
   if(req.session.username){
         res.render(process.cwd() + '/views/indexLogged.ejs');}else{
          res.render(process.cwd() + '/views/index.ejs');
          
          }
          
         // res.sendFile(process.cwd() + '/views/login.html');
     })





 // Respond not found to all the wrong routes
 app.use(function (req, res, next) {
     res.status(404);
     res.type('txt').send('Not found');
 });

 // Error Middleware
 app.use(function (err, req, res, next) {
     if (err) {
         res.status(err.status || 500)
             .type('txt')
             .send(err.message || 'SERVER ERROR');
     }
 })





 app.listen(process.env.PORT, function () {
     console.log('Node.js listening ...');
 });

app.set('view engine', 'ejs');





 //functions

 function n(n) {
     return n > 9 ? "" + n : "0" + n;
 }


 if (!process.env.DISABLE_XORIGIN) {
     app.use(function (req, res, next) {
         var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
         var origin = req.headers.origin || '*';
         if (!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1) {
             console.log('origin ' + origin);
             res.setHeader('Access-Control-Allow-Origin', origin);
             res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
         }
         next();
     });
 }

